import Head from 'next/head'
import colors from 'tailwindcss/colors'
import {PhysicsMap, AddNum, RemoveAll} from '../lib/physics.js';
import create from "zustand";
import { TbNumber1, TbNumber2, TbNumber3, TbNumber4, TbNumber5, TbNumber6, TbNumber7, TbNumber8, TbNumber9, TbNumber0 } from 'react-icons/tb';
import {HiBackspace, HiFire} from 'react-icons/hi';
import {GiFireSpellCast, GiDiceFire} from 'react-icons/gi';
import{FaTimes} from 'react-icons/fa';
import{TiDivide, TiPlus, TiMinus, TiEquals} from 'react-icons/ti';
import{BsDot} from 'react-icons/bs';

import { FireOutlined, DeleteFilled } from '@ant-design/icons';

import {evaluate} from "mathjs";
import { useEffect } from 'react';

let ballColor = '#393E46';
let ballTextColor = '#FFFFFF';
let resultGiven = false

const useInputStore = create((set) => ({
    input: "",
    setInput: (input) => set({ input }),
}))

const ButtonLine = ({pt, Sym1, Sym2, Sym3, Sym4, hideLastElement, stretchLastElement, id}) => {
  const liClass = 'flex justify-center items-center flex-row pt-' + pt;
  let hidden;
  hideLastElement ? hidden='text-black invisible' : hidden='text-black';

  const { press } = useButtonPress();

  return (
    <li className={liClass}>
      <ul className='flex flex-row w-full'>
        <li className='pr-6 text-black'><button onClick={() => press(id[0])} className='changeButtonColor w-[50px] h-[50px] bg-gray-300 shadow-[0_4px_4px_rgba(0,0,0,0.25)] rounded-full text-3xl leading-none'><div className='w-full h-full flex justify-center items-center'>{Sym1}</div></button></li>
        <li className='pr-6 text-black'><button onClick={() => press(id[1])} className='changeButtonColor w-[50px] h-[50px] bg-gray-300 shadow-[0_4px_4px_rgba(0,0,0,0.25)] rounded-full text-3xl leading-none'><div className='w-full h-full flex justify-center items-center'>{Sym2}</div></button></li>
        <li className='pr-6 text-black'><button onClick={() => press(id[2])} className='changeButtonColor w-[50px] h-[50px] bg-gray-300 shadow-[0_4px_4px_rgba(0,0,0,0.25)] rounded-full text-3xl leading-none'><div className='w-full h-full flex justify-center items-center'>{Sym3}</div></button></li>
        {stretchLastElement ? <li className={hidden}><button onClick={() => press(id[3])} className='changeButtonColor w-[50px] h-[124px] bg-gray-300 shadow-[0_4px_4px_rgba(0,0,0,0.25)] rounded-full text-3xl leading-none -translate-y-[74px]'><div className='w-full h-full flex justify-center items-center'>{Sym4}</div></button></li> :
        <li className={hidden}><button onClick={() => press(id[3])} className='changeButtonColor w-[50px] h-[50px] bg-gray-300 shadow-[0_4px_4px_rgba(0,0,0,0.25)] rounded-full text-3xl leading-none'><div className='w-full h-full flex justify-center items-center'>{Sym4}</div></button></li>}
      </ul>
    </li>
  );
}


export default function Home() {
  const { press } = useButtonPress();
  useEffect(() => {
    document.addEventListener('keydown', detectKeyDown, true);
    document.addEventListener('click', inputClick, false);
  }, []);

  const { input, setInput} = useInputStore();
  const detectKeyDown = (e) =>{
    press(e.key);
    // const currentInput = document.getElementById('input').value;
    // if(currentInput == "0"){
    //   currentInput = "";
    // }
    // if(e.key == 'Backspace'){
    //   setInput(String(currentInput).slice(0, -1));
    //   return;
    // }
    // else if(e.key == "Enter" || e.key == '='){
    //   setInput(evaluate(currentInput));
    //   return;
    // }
    // else if(e.key == 'Shift' || e.key == 'Control' || e.key == 'Left Control'){return;}
    // setInput(currentInput + e.key);
    // AddNum(e.key, ballColor, ballTextColor);
  }

  const inputClick = () => {
    const input_ = document.getElementById('input');

    const end = input_.value.length;
  
    input_.setSelectionRange(end, end);
    input_.focus();
  }

  return (
    <div>
      <PhysicsMap class='fixed'/>
      <Head>
        <title>Calculator App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="hidden pt-6"/>

      <main className='bg-gray-900 shadow-[4px_4px_4px_rgba(0,0,0,0.25)]' id='bg'>
        <div className='flex justify-center items-center h-screen'>
          <div className='bg-zinc-700 h-[573px] w-[340px] rounded-2xl flex justify-center' id='mainBody'>
            <ul>
              <li className="absolute"><button className='absolute translate-y-[50px] translate-x-2 z-50'><FireOutlined id="fire"/></button></li>
              <input value={input} id="input" className="bg-black h-[100px] w-[275px] rounded-2xl shadow-[4px_4px_4px_rgba(0,0,0,0.25)] translate-y-11
              text-white outline-none text-right pt-12 pr-2 pl-2 caret-transparent"/>
              <li className=''>
                <ul className="h-[50%] translate-y-[68px]">
                  <ButtonLine pt={0} Sym1={<DeleteFilled />} Sym2={<TiDivide/>} Sym3={<FaTimes/>} Sym4={<TiPlus/>} id={["C", "/", "*", "+"]}/>
                  <ButtonLine pt={6} Sym1={<TbNumber1/>} Sym2={<TbNumber2/>} Sym3={<TbNumber3/>} Sym4={<TiMinus/>} id={["1", "2", "3", "-"]}/>
                  <ButtonLine pt={6} Sym1={<TbNumber4/>} Sym2={<TbNumber5/>} Sym3={<TbNumber6/>} Sym4={<BsDot/>} id={["4", "5", "6", "."]}/>
                  <ButtonLine pt={6} Sym1={<TbNumber7/>} Sym2={<TbNumber8/>} Sym3={<TbNumber9/>} Sym4={<TbNumber0/>} hideLastElement={true} id={["7", "8", "9", ""]}/>
                  <ButtonLine pt={6} Sym1={<GiDiceFire/>} Sym2={<TbNumber0/>} Sym3={<HiBackspace/>} Sym4={<TiEquals/>} stretchLastElement={true} id={["theme", "0", "<-", "="]}/>
                </ul>
              </li>
            </ul>
          </div>
          
        </div>
      </main>

      <footer>

      </footer>
    </div>
  )
}

function useButtonPress() {
  const { setInput } = useInputStore();
  

  // if(num != undefined) {setInput(num);}
  const press = (id) => {    
    if(id == 'Shift' || id == 'Control' || id == 'Left Control'){return;}
    let input = document.getElementById('input').value;
    if(resultGiven && input == "0"){
      input = "";
    }
    resultGiven = false;
    if (id === "C") {
      RemoveAll();
      setInput("");
    } else if (id === "<-" || id === "Backspace") {
      setInput(String(input).slice(0, -1));
    } else if (id === "=" || id === "Enter") {
      resultGiven = true;
      setInput(evaluate(input));
    } else if (id === "theme") {
      createNewTheme()
    } else {
      AddNum(id, ballColor, ballTextColor);
      setInput(input + id);
    }
  }

  return {press}
}

// const colorChoices = [colors.slate, colors.gray, colors.zinc, colors.neutral, colors.stone, colors.red, colors.orange, colors.amber, 
// colors.yellow, colors.lime, colors.green, colors.emerald, colors.teal, colors.cyan, colors.sky, colors.blue, colors.indigo, colors.violet,
// colors.purple, colors.fuchsia, colors.pink, colors.rose] 

//true = white, false = black
const colorSets = [
  {bg: "#2b2d42", input: "#2b2d42", body:"#8d99ae", ball: '#edf2f4', button: '#edf2f4', text: true, buttonText: false}, 
  {bg: "#283618", input: "#606c38", body:"#dda15e", ball: "#fefae0", button: "#fefae0", text: true, buttonText: false}, //
  {bg: "#3D8361", input: "#1C6758", body:"#D6CDA4", ball: "#EEF2E6", button: "#EEF2E6", text: true, buttonText: false}, 
  {bg: "#7868E6", input: "#EDEEF7", body:"#B8B5FF", ball: '#E4FBFF', button: '#E4FBFF', text: false, buttonText: false}, 
  {bg: "#5F6F94", input: "#25316D", body:"#97D2EC", ball: "#FEF5AC", button: "#FEF5AC", text: true, buttonText: false}, 
  {bg: "#222831", input: "#393E46", body:"#FFD369", ball: "#EEEEEE", button: "#EEEEEE", text: true, buttonText: false}, 
  {bg: "#3b3b3b", input: "#3b3b3b", body:"#009063", ball: "#e3e0f3", button: "#e3e0f3", text: true, buttonText: false}
];

// const colorSets = [["#004643", "#fffffe", "#f9bc60", true, true], 
// ["#fef6e4", "#001858", "#f582ae", false, false], 
// ["#55423d", "#fffffe", "#ffc0ad", true, true], 
// ["#faeee7", "#33272a", "#ff8ba7", false, false], 
// ["#fffffe", "#272343", "#ffd803", false, true], 
// ["#0f0e17", "#fffffe", "#ff8906", true, false], 
// ["#232946", "#fffffe", "#eebbc3", true, true], 
// ["#f9f4ef", "#020826", "#8c7851", false, false], 
// ["#eff0f3", "#0d0d0d", "#ff8e3c", false, false], 
// ["#f8f5f2", "#232323", "#078080", false, false], 
// ["#fec7d7", "#0e172c", "#fffffe", false, true],
// ["#16161a", "#fffffe", "#7f5af0", true, false]] //bg, input, buttons 

// let num = -1;

let lastRandomNum = -1;

function createNewTheme () {
  console.trace("createNewTheme")
  const fireElement = document.getElementById("fire");
  //randomizing the theme
  let randomNum = -1;

  do{
    randomNum = Math.floor(Math.random() * colorSets.length); //num++;//
  } while(randomNum == lastRandomNum);

  lastRandomNum = randomNum;
  const randomTheme = colorSets[randomNum];
  
  // num = num + 1;
  const bg = document.getElementById("bg");
  bg.style.backgroundColor = randomTheme.bg;

  const mainBody = document.getElementById("mainBody");
  mainBody.style.backgroundColor = randomTheme.body;

  const input = document.getElementById("input");
  input.style.backgroundColor = randomTheme.input;

  const buttons = document.getElementsByClassName("changeButtonColor");
  for (let i = 0; i < buttons.length; i++) {
    buttons[i].style.backgroundColor = randomTheme.button;
  }

  if(randomTheme.text) {
    input.style.color = "white";
    fireElement.style.color = "white";
  }
  else{
    input.style.color = "black";
    fireElement.style.color = "black";
  }

  if(randomTheme.buttonText){
    for (let i = 0; i < buttons.length; i++) {
      buttons[i].style.color = "white";
    }
    ballTextColor = '#FFFFFF';
  }
  else{
    for (let i = 0; i < buttons.length; i++) {
      buttons[i].style.color = "black";
    }
    ballTextColor = '#000000';
  }

  ballColor = randomTheme.ball;
}

// function GetAllColors(){
//   let colors = []
//   for(i = 50; i < 900; i++){
//     colors.push(ColorChoices[i]);
//   }
//   const green = colors.green[600]
// }
